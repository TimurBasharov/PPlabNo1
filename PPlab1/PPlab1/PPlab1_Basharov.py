import json
import xml.etree.ElementTree as ET


# –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –º–∞–≥–∞–∑–∏–Ω–∞
class EStore:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏."""

    def __init__(self, name: str):
        self.name = name
        self.warehouses: list[Warehouse] = []
        self.customers: list[Customer] = []
        self.orders: list[Order] = []
        self.workers: list[Worker] = []

    def add_warehouse(self, warehouse: "Warehouse") -> None:
        self.warehouses.append(warehouse)

    def add_customer(self, customer: "Customer") -> None:
        self.customers.append(customer)

    def add_order(self, order: "Order") -> None:
        self.orders.append(order)

    def add_worker(self, worker: "Worker") -> None:
        self.workers.append(worker)

    #—Ä–∞–±–æ—Ç–∞ —Å JSON —Ñ–∞–π–ª–∞–º–∏
    def save_to_json(self, filename: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ –≤ JSON."""
        data = {
            "name": self.name,
            "warehouses": [
                {
                    "location": w.location,
                    "products": [{"name": p.name, "price": p.price, "quantity": p.quantity} for p in w.products],
                    "workers": [{"name": wr.name, "role": wr.role} for wr in w.workers]
                } for w in self.warehouses
            ],
            "customers": [{"name": c.name, "email": c.email} for c in self.customers],
            "orders": [
                {"customer": o.customer.name, "product": o.product.name, "quantity": o.quantity}
                for o in self.orders
            ],
        }
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

    # —Ä–∞–±–æ—Ç–∞ —Å XML —Ñ–∞–π–ª–∞–º–∏
    def save_to_xml(self, filename: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ –≤ XML."""
        root = ET.Element("estore", name=self.name)

        for w in self.warehouses:
            w_el = ET.SubElement(root, "warehouse", location=w.location)

            for p in w.products:
                ET.SubElement(
                    w_el, "product",
                    name=p.name,
                    price=str(p.price),
                    quantity=str(p.quantity)
                )

        tree = ET.ElementTree(root)
        tree.write(filename, encoding="utf-8", xml_declaration=True)


class Product:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ç–æ–≤–∞—Ä –º–∞–≥–∞–∑–∏–Ω–∞."""

    def __init__(self, name: str, price: float, quantity: int = 0):
        self.name = name
        self.price = price
        self.quantity = quantity


class Worker:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞."""

    def __init__(self, name: str, role: str):
        self.name = name
        self.role = role


class Customer:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—è."""

    def __init__(self, name: str, email: str):
        self.name = name
        self.email = email


class Warehouse:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–∫–ª–∞–¥ –º–∞–≥–∞–∑–∏–Ω–∞."""

    def __init__(self, location: str):
        self.location = location
        self.products: list[Product] = []
        self.workers: list[Worker] = []

    def add_product(self, product: Product) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥."""
        self.products.append(product)

    def get_products(self) -> list[Product]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤."""
        return self.products

    def update_product(self, name: str, new_price: float) -> None:
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞."""
        for p in self.products:
            if p.name == name:
                p.price = new_price
                return
        raise ProductNotFoundError(f"–¢–æ–≤–∞—Ä '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def remove_product(self, name: str) -> None:
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        for p in self.products:
            if p.name == name:
                self.products.remove(p)
                return
        raise ProductNotFoundError(f"–¢–æ–≤–∞—Ä '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def add_worker(self, worker: Worker) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥."""
        self.workers.append(worker)


class Order:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∑–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è."""

    def __init__(self, customer: Customer, product: Product, quantity: int):
        self.customer = customer
        self.product = product
        self.quantity = quantity

    def process_order(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤."""
        if self.quantity > self.product.quantity:
            raise InsufficientStockError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {self.product.name}")
        self.product.quantity -= self.quantity


#–∫–ª–∞—Å—Å—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è
class StoreError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫"""
    pass


class ProductNotFoundError(StoreError):
    """–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    pass


class InsufficientStockError(StoreError):
    """–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    pass


class InvalidOrderError(StoreError):
    """–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑"""
    pass


if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –º–∞–≥–∞–∑–∏–Ω
    store = EStore("TechStore")

    # –°–æ–∑–¥–∞—ë–º —Å–∫–ª–∞–¥
    warehouse = Warehouse("–ú–æ—Å–∫–≤–∞")

    # –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä—ã
    laptop = Product("–ù–æ—É—Ç–±—É–∫", 75000.0, 10)
    phone = Product("–°–º–∞—Ä—Ç—Ñ–æ–Ω", 45000.0, 15)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    warehouse.add_product(laptop)
    warehouse.add_product(phone)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    worker = Worker("–ò–≤–∞–Ω", "–º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–ª–∞–¥–∞")
    warehouse.add_worker(worker)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–ª–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω
    store.add_warehouse(warehouse)

    # –°–æ–∑–¥–∞—ë–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    customer = Customer("–ü–µ—Ç—Ä", "petr@mail.ru")
    store.add_customer(customer)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    order = Order(customer, laptop, 1)
    store.add_order(order)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
    try:
        order.process_order()
        print(f"‚úÖ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {customer.name} –∫—É–ø–∏–ª {order.quantity} —à—Ç. {order.product.name}")
    except StoreError as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã
    store.save_to_json("estore_data.json")
    store.save_to_xml("estore_data.xml")

    print("\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã estore_data.json –∏ estore_data.xml\n")

    # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    with open("estore_data.json", "r", encoding="utf-8") as f:
        print("=== JSON –§–ê–ô–õ ===")
        print(f.read())

    with open("estore_data.xml", "r", encoding="utf-8") as f:
        print("\n=== XML –§–ê–ô–õ ===")
        print(f.read())
